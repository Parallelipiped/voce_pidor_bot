package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"os/exec"
	"os/signal"
	"path/filepath"
	"syscall"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"gopkg.in/yaml.v3"
)

// Config —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
type Config struct {
	Telegram struct {
		Token            string `yaml:"token"`
		MaxVoiceDuration int    `yaml:"max_voice_duration"`
	} `yaml:"telegram"`
	Paths struct {
		TempDir      string `yaml:"temp_dir"`
		PythonScript string `yaml:"python_script"`
		FFmpeg       string `yaml:"ffmpeg"`
	} `yaml:"paths"`
	Speech struct {
		Model             string            `yaml:"model"`
		DefaultLanguage   string            `yaml:"default_language"`
		Languages         map[string]string `yaml:"languages"`
		UseGPU           bool              `yaml:"use_gpu"`
		AutoDetectLanguage bool             `yaml:"auto_detect_language"`
	} `yaml:"speech"`
	Audio struct {
		SampleRate int `yaml:"sample_rate"`
		Channels   int `yaml:"channels"`
		BitDepth   int `yaml:"bit_depth"`
	} `yaml:"audio"`
}

var config Config

func loadConfig() error {
	// –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	data, err := os.ReadFile("config.yaml")
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: %v", err)
	}

	// –ü–∞—Ä—Å–∏–º YAML
	err = yaml.Unmarshal(data, &config)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ñ–∏–≥–∞: %v", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
	projectRoot, err := os.Getwd()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: %v", err)
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
	if !filepath.IsAbs(config.Paths.TempDir) {
		config.Paths.TempDir = filepath.Join(projectRoot, config.Paths.TempDir)
	}
	if !filepath.IsAbs(config.Paths.PythonScript) {
		config.Paths.PythonScript = filepath.Join(projectRoot, config.Paths.PythonScript)
	}
	if !filepath.IsAbs(config.Paths.FFmpeg) {
		config.Paths.FFmpeg = filepath.Join(projectRoot, config.Paths.FFmpeg)
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –ø—É—Ç–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	log.Printf("Loaded paths:")
	log.Printf("- TempDir: %s", config.Paths.TempDir)
	log.Printf("- PythonScript: %s", config.Paths.PythonScript)
	log.Printf("- FFmpeg: %s", config.Paths.FFmpeg)

	return nil
}

func createPythonConfig() error {
	// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è Python –∫–æ–Ω—Ñ–∏–≥–∞
	pythonConfig := map[string]interface{}{
		"speech": map[string]interface{}{
			"model":              config.Speech.Model,
			"default_language":   config.Speech.DefaultLanguage,
			"languages":          config.Speech.Languages,
			"use_gpu":           config.Speech.UseGPU,
			"auto_detect_language": config.Speech.AutoDetectLanguage,
		},
		"audio": map[string]interface{}{
			"sample_rate": config.Audio.SampleRate,
			"channels":    config.Audio.Channels,
			"bit_depth":   config.Audio.BitDepth,
		},
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON
	jsonData, err := json.MarshalIndent(pythonConfig, "", "  ")
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è JSON –∫–æ–Ω—Ñ–∏–≥–∞: %v", err)
	}

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
	configPath := filepath.Join(config.Paths.TempDir, "config.json")
	log.Printf("Creating Python config at: %s", configPath)
	
	err = os.WriteFile(configPath, jsonData, 0644)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ JSON –∫–æ–Ω—Ñ–∏–≥–∞: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
	if _, err := os.Stat(configPath); os.IsNotExist(err) {
		return fmt.Errorf("–∫–æ–Ω—Ñ–∏–≥ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω: %v", err)
	}

	log.Printf("Python config created successfully")
	return nil
}

func init() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	if err := loadConfig(); err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:", err)
	}

	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
	if err := os.MkdirAll(config.Paths.TempDir, os.ModePerm); err != nil {
		log.Fatal("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é:", err)
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è Python
	if err := createPythonConfig(); err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è Python:", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
	testFile := filepath.Join(config.Paths.TempDir, "test.txt")
	if err := os.WriteFile(testFile, []byte("test"), 0666); err != nil {
		log.Fatal("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é:", err)
	}
	os.Remove(testFile)
}

func downloadFile(filepath string, url string) error {
	resp, err := http.Get(url)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	out, err := os.Create(filepath)
	if err != nil {
		return err
	}
	defer out.Close()

	_, err = io.Copy(out, resp.Body)
	return err
}

func convertOggToWav(oggPath string, wavPath string) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
	if _, err := os.Stat(oggPath); os.IsNotExist(err) {
		return fmt.Errorf("OGG —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: %s", oggPath)
	}

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OGG –≤ WAV —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è Whisper
	cmd := exec.Command(config.Paths.FFmpeg,
		"-i", oggPath,           // –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
		"-ar", "16000",         // —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ 16kHz
		"-ac", "1",             // –º–æ–Ω–æ
		"-c:a", "pcm_s16le",    // 16-bit PCM
		"-y",                    // –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
		wavPath,                 // –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
	)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É
	output, err := cmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ FFmpeg: %v\nOutput: %s", err, string(output))
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä –±–æ–ª—å—à–µ 0
	if info, err := os.Stat(wavPath); os.IsNotExist(err) {
		return fmt.Errorf("FFmpeg –Ω–µ —Å–æ–∑–¥–∞–ª –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª")
	} else if info.Size() == 0 {
		return fmt.Errorf("FFmpeg —Å–æ–∑–¥–∞–ª –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª")
	}

	return nil
}

func recognizeSpeech(wavPath string) (string, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º Python
	if _, err := os.Stat(wavPath); os.IsNotExist(err) {
		return "", fmt.Errorf("WAV —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º Python: %s", wavPath)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º
	if err := createPythonConfig(); err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è Python: %v", err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º Python —Å–∫—Ä–∏–ø—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
	cmd := exec.Command("C:\\Users\\serve\\AppData\\Local\\Programs\\Python\\Python310\\python.exe", "-X", "utf8", config.Paths.PythonScript, wavPath)
	
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Python
	env := os.Environ()
	env = append(env, "PYTHONIOENCODING=utf-8")
	env = append(env, "PYTHONUTF8=1")
	cmd.Env = env

	var stdout, stderr bytes.Buffer
	cmd.Stdout = &stdout
	cmd.Stderr = &stderr

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
	log.Printf("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∏–∑ —Ñ–∞–π–ª–∞: %s", wavPath)
	err := cmd.Run()

	// –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ stderr –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
	if stderrStr := stderr.String(); stderrStr != "" {
		log.Printf("Stderr: %s", stderrStr)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏
	if err != nil {
		return "", fmt.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ä–µ—á–∏: %v", err)
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
	return stdout.String(), nil
}

func cleanup() {
	// –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
	files := []string{
		filepath.Join(config.Paths.TempDir, "voice.wav"),
		filepath.Join(config.Paths.TempDir, "voice.ogg"),
	}

	for _, file := range files {
		if err := os.Remove(file); err != nil && !os.IsNotExist(err) {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ %s: %v", file, err)
		}
	}
}

func voiceMessageHandler(update tgbotapi.Update, bot *tgbotapi.BotAPI) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	username := update.Message.From.UserName
	if username == "" {
		username = update.Message.From.FirstName
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
	duration := update.Message.Voice.Duration
	if duration > config.Telegram.MaxVoiceDuration { 
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, 
			"‚ö†Ô∏è <b>–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"+
			"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: "+formatDuration(config.Telegram.MaxVoiceDuration)+"\n"+
			"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "+formatDuration(duration))
		msg.ParseMode = "HTML"
		bot.Send(msg)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	initialMessage := fmt.Sprintf(`üé§ <b>–†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>
üë§ –û—Ç: @%s
‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %s

<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...</i>`, username, formatDuration(duration))

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, initialMessage)
	msg.ParseMode = "HTML"
	processingMsg, err := bot.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
	if err := os.MkdirAll(config.Paths.TempDir, os.ModePerm); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: %v", err)
		editMessageHTML(bot, update.Message.Chat.ID, processingMsg.MessageID, 
			"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏</b>")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
	file, err := bot.GetFile(tgbotapi.FileConfig{FileID: update.Message.Voice.FileID})
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: %v", err)
		editMessageHTML(bot, update.Message.Chat.ID, processingMsg.MessageID, 
			"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è</b>")
		return
	}

	time.Sleep(300 * time.Millisecond)
	editMessageHTML(bot, update.Message.Chat.ID, processingMsg.MessageID, 
		fmt.Sprintf(`üé§ <b>–†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>
üë§ –û—Ç: @%s
‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %s

‚è≥ <i>–ó–∞–≥—Ä—É–∂–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...</i>`, username, formatDuration(duration)))

	// –ó–∞–≥—Ä—É–∂–∞–µ–º OGG —Ñ–∞–π–ª
	oggPath := filepath.Join(config.Paths.TempDir, "voice.ogg")
	err = downloadFile(oggPath, file.Link(config.Telegram.Token))
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: %v", err)
		editMessageHTML(bot, update.Message.Chat.ID, processingMsg.MessageID, 
			"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è</b>")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ OGG —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π
	if info, err := os.Stat(oggPath); os.IsNotExist(err) {
		log.Printf("OGG —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏: %v", err)
		editMessageHTML(bot, update.Message.Chat.ID, processingMsg.MessageID, 
			"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è</b>")
		return
	} else if info.Size() == 0 {
		log.Printf("–ó–∞–≥—Ä—É–∂–µ–Ω –ø—É—Å—Ç–æ–π OGG —Ñ–∞–π–ª")
		editMessageHTML(bot, update.Message.Chat.ID, processingMsg.MessageID, 
			"‚ùå <b>–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª</b>")
		os.Remove(oggPath)
		return
	}

	time.Sleep(300 * time.Millisecond)
	editMessageHTML(bot, update.Message.Chat.ID, processingMsg.MessageID, 
		fmt.Sprintf(`üé§ <b>–†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>
üë§ –û—Ç: @%s
‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %s

üîÑ <i>–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –∞—É–¥–∏–æ...</i>`, username, formatDuration(duration)))

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
	wavPath := filepath.Join(config.Paths.TempDir, "voice.wav")
	err = convertOggToWav(oggPath, wavPath)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: %v", err)
		editMessageHTML(bot, update.Message.Chat.ID, processingMsg.MessageID, 
			"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è</b>")
		os.Remove(oggPath)
		return
	}

	// –£–¥–∞–ª—è–µ–º OGG —Ñ–∞–π–ª, –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
	os.Remove(oggPath)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º WAV —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º
	if info, err := os.Stat(wavPath); os.IsNotExist(err) {
		log.Printf("WAV —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: %v", err)
		editMessageHTML(bot, update.Message.Chat.ID, processingMsg.MessageID, 
			"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∞—É–¥–∏–æ</b>")
		return
	} else if info.Size() == 0 {
		log.Printf("WAV —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
		editMessageHTML(bot, update.Message.Chat.ID, processingMsg.MessageID, 
			"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ</b>")
		os.Remove(wavPath)
		return
	}

	time.Sleep(300 * time.Millisecond)
	editMessageHTML(bot, update.Message.Chat.ID, processingMsg.MessageID, 
		fmt.Sprintf(`üé§ <b>–†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>
üë§ –û—Ç: @%s
‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %s

üí´ <i>–ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å Whisper (small)...</i>`, username, formatDuration(duration)))

	time.Sleep(300 * time.Millisecond)
	editMessageHTML(bot, update.Message.Chat.ID, processingMsg.MessageID, 
		fmt.Sprintf(`üé§ <b>–†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>
üë§ –û—Ç: @%s
‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %s

üîç <i>–†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...</i>`, username, formatDuration(duration)))

	// –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
	text, err := recognizeSpeech(wavPath)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ä–µ—á–∏: %v", err)
		editMessageHTML(bot, update.Message.Chat.ID, processingMsg.MessageID, 
			"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ä–µ—á–∏</b>")
		os.Remove(wavPath)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	if text == "" {
		editMessageHTML(bot, update.Message.Chat.ID, processingMsg.MessageID, 
			"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç</b>")
	} else {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤–º–µ—Å—Ç–æ HTML-—Ç–µ–≥–æ–≤
		response := fmt.Sprintf(`‚úÖ <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</b>
üë§ –û—Ç: @%s
‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %s

%s`, username, formatDuration(duration), text)
		if err := editMessageHTML(bot, update.Message.Chat.ID, processingMsg.MessageID, response); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: %v", err)
			// –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
			plainResponse := fmt.Sprintf("‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç\n–û—Ç: @%s\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %s\n\n%s",
				username, formatDuration(duration), text)
			msg := tgbotapi.NewEditMessageText(update.Message.Chat.ID, processingMsg.MessageID, plainResponse)
			if _, err := bot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ plain —Ç–µ–∫—Å—Ç–∞: %v", err)
			}
		}
	}

	// –£–¥–∞–ª—è–µ–º WAV —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
	os.Remove(wavPath)
}

func formatDuration(seconds int) string {
	if seconds < 60 {
		return fmt.Sprintf("%d —Å–µ–∫", seconds)
	}
	minutes := seconds / 60
	remainingSeconds := seconds % 60
	if remainingSeconds == 0 {
		return fmt.Sprintf("%d –º–∏–Ω", minutes)
	}
	return fmt.Sprintf("%d –º–∏–Ω %d —Å–µ–∫", minutes, remainingSeconds)
}

func editMessageHTML(bot *tgbotapi.BotAPI, chatID int64, messageID int, text string) error {
	msg := tgbotapi.NewEditMessageText(chatID, messageID, text)
	msg.ParseMode = "HTML"
	_, err := bot.Send(msg)
	return err
}

func handleStart(bot *tgbotapi.BotAPI, update tgbotapi.Update) error {
	welcomeText := `üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

üéô –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø—Ä–µ–æ–±—Ä–∞–∑—É—é –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç.

üåç –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:
`
	// –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	for code, name := range config.Speech.Languages {
		welcomeText += fmt.Sprintf("‚Ä¢ %s (%s)\n", name, code)
	}

	welcomeText += `
‚öôÔ∏è –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.
üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞: `

	if config.Speech.AutoDetectLanguage {
		welcomeText += "–≤–∫–ª—é—á–µ–Ω–æ"
	} else {
		welcomeText += "–≤—ã–∫–ª—é—á–µ–Ω–æ"
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, welcomeText)
	_, err := bot.Send(msg)
	return err
}

func handleHelp(bot *tgbotapi.BotAPI, update tgbotapi.Update) error {
	helpText := `ü§ñ VoicePidor Bot - –ü–æ–º–æ—â—å

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üéô –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
2. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
3. –ü–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—Å—Ç

üåç –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:
`
	// –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	for code, name := range config.Speech.Languages {
		helpText += fmt.Sprintf("‚Ä¢ %s (%s)\n", name, code)
	}

	helpText += fmt.Sprintf(`
‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: %s
‚Ä¢ –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞: %v
‚Ä¢ –ú–æ–¥–µ–ª—å Whisper: %s
‚Ä¢ GPU: %v

‚ÑπÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %d —Å–µ–∫—É–Ω–¥`, 
		config.Speech.DefaultLanguage,
		config.Speech.AutoDetectLanguage,
		config.Speech.Model,
		config.Speech.UseGPU,
		config.Telegram.MaxVoiceDuration)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, helpText)
	_, err := bot.Send(msg)
	return err
}

func main() {
	cleanup()

	bot, err := tgbotapi.NewBotAPI(config.Telegram.Token)
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = false

	deleteWebhook := tgbotapi.DeleteWebhookConfig{
		DropPendingUpdates: true,
	}
	_, err = bot.Request(deleteWebhook)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: %v", err)
	}

	log.Printf("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω, ID: %d, –ò–º—è: %s", bot.Self.ID, bot.Self.UserName)

	updateConfig := tgbotapi.NewUpdate(0)
	updateConfig.Timeout = 60

	updates := bot.GetUpdatesChan(updateConfig)

	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	go func() {
		for update := range updates {
			if update.Message == nil {
				continue
			}

			log.Printf("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ID: %d", update.UpdateID)

			switch {
			case update.Message.Command() == "start":
				if err := handleStart(bot, update); err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: %v", err)
				}
			case update.Message.Command() == "help":
				if err := handleHelp(bot, update); err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /help: %v", err)
				}
			case update.Message.Voice != nil:
				voiceMessageHandler(update, bot)
			}
		}
	}()

	<-sigChan
	log.Println("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –∑–∞–∫—Ä—ã–≤–∞—é –±–æ—Ç–∞...")
	cleanup()
}
